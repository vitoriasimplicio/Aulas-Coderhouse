{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from datetime import datetime\n",
    "from plyer import notification\n",
    "import sqlite3\n",
    "import ast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sistema de alerta criado\n",
    "def alert(nivel, base, etapa, erro=\"\"):\n",
    "    now = str(datetime.now())\n",
    "    msg = f\"Falha no carregamento da base {base} na etapa {etapa}.\\n{now}\\n{erro}\"\n",
    "\n",
    "    if nivel == 1:\n",
    "        title = 'ATENÇÃO: Alerta de Nível Baixo'\n",
    "    elif nivel == 2:\n",
    "        title = 'ATENÇÃO: Alerta de Nível Médio'\n",
    "    elif nivel == 3:\n",
    "        title = 'ATENÇÃO: Alerta de Nível Alto'\n",
    "    else:\n",
    "        print(\"Nivel\", nivel, \" não especificado ou desconhecido.\")\n",
    "\n",
    "    notification.notify(\n",
    "        title=title,\n",
    "        message=msg,\n",
    "        app_name='Alerta',\n",
    "        timeout=10\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para criar tabelas\n",
    "def criar_tabelas():\n",
    "    conexao = sqlite3.connect('projeto_final_1-7.db')\n",
    "    cursor = conexao.cursor()\n",
    "\n",
    "    cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS pokemons (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            nome TEXT,\n",
    "            tipo TEXT,\n",
    "            altura REAL,\n",
    "            peso REAL,\n",
    "            experiencia_base INTEGER\n",
    "        )\n",
    "    ''')\n",
    "\n",
    "    cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS habilidades (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            nome TEXT,\n",
    "            efeito TEXT\n",
    "        )\n",
    "    ''')\n",
    "\n",
    "    cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS habitats (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            nome TEXT\n",
    "        )\n",
    "    ''')\n",
    "\n",
    "    cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS tipos (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            nome TEXT,\n",
    "            relacoes_dano TEXT,\n",
    "            slot INTEGER\n",
    "        )\n",
    "    ''')\n",
    "\n",
    "    conexao.commit()\n",
    "    conexao.close()\n",
    "\n",
    "# Chamar a função para criar as tabelas\n",
    "criar_tabelas()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para salvar no banco de dados\n",
    "def save_bd(df: pd.DataFrame, nome_tabela: str):\n",
    "    if df is not None:\n",
    "        conect = sqlite3.connect('projeto_final_1-7.db')\n",
    "        df.to_sql(nome_tabela, conect, if_exists='replace', index=False)\n",
    "        conect.close()\n",
    "    else:\n",
    "        print(f\"DataFrame para a tabela {nome_tabela} é None. Não foi possível salvar no banco de dados.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para carregar do banco de dados\n",
    "def load_bd(nome_tabela):\n",
    "    conect = sqlite3.connect('projeto_final_1-7.db')\n",
    "    query = f\"SELECT * FROM {nome_tabela}\"\n",
    "    df = pd.read_sql(query, conect)\n",
    "    conect.close()\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para obter dados da API\n",
    "def get_json_api(url):\n",
    "    try:\n",
    "        response = requests.get(url)\n",
    "        response.raise_for_status()  # Verifica se houve algum erro na requisição\n",
    "        json_data = response.json()\n",
    "        return json_data\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        print(f\"Erro ao fazer requisição para {url}: {e}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para extrair dados da API e salvar no banco de dados\n",
    "def extract_and_save(url, table_name):\n",
    "    try:\n",
    "        df = pd.DataFrame()\n",
    "\n",
    "        while url is not None:\n",
    "            print(url, end='\\r')\n",
    "\n",
    "            # Obter dados da API\n",
    "            json_data = get_json_api(url)\n",
    "\n",
    "            # Para dataframe\n",
    "            df_temp = pd.DataFrame(json_data['results'])\n",
    "\n",
    "            # Append/concat\n",
    "            df = pd.concat([df, df_temp], ignore_index=True)\n",
    "\n",
    "            # Próxima página\n",
    "            url = json_data.get('next')\n",
    "\n",
    "        # Salvar no banco de dados\n",
    "        save_bd(df, table_name)\n",
    "        print(f\"Extração de {table_name} concluída com sucesso!\")\n",
    "\n",
    "    except Exception as e:\n",
    "        alert(nivel=3, base=table_name, etapa=\"EXTRACAO\", erro=str(e))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Etapa de extração\n",
    "def etapa_extracao():\n",
    "    try:\n",
    "        extract_and_save(\"https://pokeapi.co/api/v2/pokemon\", \"pokemons_url\")\n",
    "        extract_and_save(\"https://pokeapi.co/api/v2/ability\", \"habilidades_url\")\n",
    "        extract_and_save(\"https://pokeapi.co/api/v2/pokemon-habitat\", \"habitat_url\")\n",
    "        extract_and_save(\"https://pokeapi.co/api/v2/type\", \"type_url\")\n",
    "\n",
    "    except Exception as e:\n",
    "        alert(nivel=3, base=\"etapa_extracao\", etapa=\"EXTRACAO\", erro=str(e))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extração de pokemons_url concluída com sucesso!imit=20\n",
      "Extração de habilidades_url concluída com sucesso!=70\n",
      "Extração de habitat_url concluída com sucesso!\n",
      "Extração de type_url concluída com sucesso!\n"
     ]
    }
   ],
   "source": [
    "# Execute a etapa de extração\n",
    "etapa_extracao()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para criar a base de pokemons\n",
    "def create_pokemons_base(df_pokemons_url):\n",
    "    df_pokemons_full = pd.DataFrame()\n",
    "\n",
    "    for url in df_pokemons_url['url']:\n",
    "        print(url, end='\\r')\n",
    "\n",
    "        # Obter os detalhes do pokémon\n",
    "        json_data = get_json_api(url)\n",
    "\n",
    "        # Extrair informações relevantes\n",
    "        id = json_data['id']\n",
    "        name = json_data['name']\n",
    "        abilities = [ability['ability']['name'] for ability in json_data['abilities']]\n",
    "        height = json_data['height']\n",
    "        weight = json_data['weight']\n",
    "        base_experience = json_data['base_experience']\n",
    "\n",
    "        # Criar uma série para o pokémon\n",
    "        sr_pokemon = pd.Series({\n",
    "            \"id\": id,\n",
    "            \"name\": name,\n",
    "            \"abilities\": str(abilities),  # Convertendo a lista para uma string\n",
    "            \"height\": height,\n",
    "            \"weight\": weight,\n",
    "            \"base_experience\": base_experience\n",
    "        })\n",
    "\n",
    "        # Concatenar com o DataFrame geral\n",
    "        df_pokemons_full = pd.concat([df_pokemons_full, sr_pokemon.to_frame().T], ignore_index=True)\n",
    "\n",
    "    return df_pokemons_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://pokeapi.co/api/v2/pokemon/10277/\r"
     ]
    }
   ],
   "source": [
    "# Criação da base de pokemons\n",
    "df_pokemons_url = load_bd(\"pokemons_url\")\n",
    "df_pokemons_full = create_pokemons_base(df_pokemons_url)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         id                      name                    abilities height  \\\n",
      "0         1                 bulbasaur  ['overgrow', 'chlorophyll']      7   \n",
      "1         2                   ivysaur  ['overgrow', 'chlorophyll']     10   \n",
      "2         3                  venusaur  ['overgrow', 'chlorophyll']     20   \n",
      "3         4                charmander     ['blaze', 'solar-power']      6   \n",
      "4         5                charmeleon     ['blaze', 'solar-power']     11   \n",
      "...     ...                       ...                          ...    ...   \n",
      "1297  10273   ogerpon-wellspring-mask             ['water-absorb']     12   \n",
      "1298  10274  ogerpon-hearthflame-mask             ['mold-breaker']     12   \n",
      "1299  10275  ogerpon-cornerstone-mask                   ['sturdy']     12   \n",
      "1300  10276        terapagos-terastal               ['tera-shell']      3   \n",
      "1301  10277         terapagos-stellar            ['teraform-zero']     17   \n",
      "\n",
      "     weight base_experience  \n",
      "0        69              64  \n",
      "1       130             142  \n",
      "2      1000             263  \n",
      "3        85              62  \n",
      "4       190             142  \n",
      "...     ...             ...  \n",
      "1297    398            None  \n",
      "1298    398            None  \n",
      "1299    398            None  \n",
      "1300    160            None  \n",
      "1301    770            None  \n",
      "\n",
      "[1302 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "# Visualize o DataFrame\n",
    "print(df_pokemons_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para criar a base de habilidades\n",
    "def create_habilidades_base(df_habilidades_url):\n",
    "    df_habilidades_full = pd.DataFrame()\n",
    "\n",
    "    for url in df_habilidades_url['url'].values:\n",
    "        json_data = get_json_api(url)\n",
    "\n",
    "        id = json_data['id']\n",
    "        name = json_data['name']\n",
    "        generation = json_data['generation']['name']\n",
    "        is_main_series = json_data['is_main_series']\n",
    "        effect = \"\\n---\\n\".join([effect['effect'] for effect in json_data['effect_entries']])\n",
    "\n",
    "        sr_habilidade = pd.Series({\n",
    "            \"id\": id,\n",
    "            \"name\": name,\n",
    "            \"generation\": generation,\n",
    "            \"is_main_series\": is_main_series,\n",
    "            \"effect\": effect\n",
    "        })\n",
    "\n",
    "        df_habilidades_full = pd.concat([df_habilidades_full, sr_habilidade.to_frame().T], ignore_index=True)\n",
    "\n",
    "    return df_habilidades_full\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Criação da base de habilidades\n",
    "df_habilidades_url = load_bd(\"habilidades_url\")\n",
    "df_habilidades_full = create_habilidades_base(df_habilidades_url)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        id          name      generation is_main_series  \\\n",
      "0        1        stench  generation-iii           True   \n",
      "1        2       drizzle  generation-iii           True   \n",
      "2        3   speed-boost  generation-iii           True   \n",
      "3        4  battle-armor  generation-iii           True   \n",
      "4        5        sturdy  generation-iii           True   \n",
      "..     ...           ...             ...            ...   \n",
      "362  10056        run-up    generation-v          False   \n",
      "363  10057     conqueror    generation-v          False   \n",
      "364  10058       shackle    generation-v          False   \n",
      "365  10059         decoy    generation-v          False   \n",
      "366  10060        shield    generation-v          False   \n",
      "\n",
      "                                                effect  \n",
      "0    Attacken die Schaden verursachen haben mit jed...  \n",
      "1    Das weather ändert sich zu rain wenn ein Pokém...  \n",
      "2    Die speed des Pokémon erhöht sich jede Runde u...  \n",
      "3    Attacken können keinen kritischen Treffer land...  \n",
      "4    Wenn das Pokémon volle hp hat, lässt jeder Tre...  \n",
      "..                                                 ...  \n",
      "362                                                     \n",
      "363                                                     \n",
      "364                                                     \n",
      "365                                                     \n",
      "366                                                     \n",
      "\n",
      "[367 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "# Visualize o DataFrame\n",
    "print(df_habilidades_full)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para criar a base de habitats\n",
    "def create_habitats_base(df_habitat_url):\n",
    "    df_habitats_full = pd.DataFrame()\n",
    "\n",
    "    for url in df_habitat_url['url'].values:\n",
    "        try:\n",
    "            habitat_data = get_json_api(url)\n",
    "\n",
    "            if 'pokemon_species' in habitat_data:\n",
    "                for species in habitat_data['pokemon_species']:\n",
    "                    pokemon_name = species['name']\n",
    "                    habitat_id =  habitat_data['id']\n",
    "                    habitat_name = habitat_data['name']\n",
    "\n",
    "                sr_habitat = pd.Series({\n",
    "                    \"id\": habitat_id,\n",
    "                    \"name\": species['name'],\n",
    "                    \"habitat_name\": habitat_name\n",
    "                })\n",
    "\n",
    "                df_habitats_full = pd.concat([df_habitats_full, sr_habitat.to_frame().T], ignore_index=True)\n",
    "            else:\n",
    "                print(f\"Resposta da API para URL {url} não possui as chaves 'id' e 'name'.\")\n",
    "        except Exception as e:\n",
    "            print(f\"Erro ao processar a URL {url}: {str(e)}\")\n",
    "\n",
    "    return df_habitats_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Criação da base de habitats\n",
    "df_habitats_url = load_bd(\"habitat_url\")\n",
    "df_habitats_full = create_habitats_base(df_habitats_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  id       name   habitat_name\n",
      "0  1     glalie           cave\n",
      "1  2   dusclops         forest\n",
      "2  3   chimecho      grassland\n",
      "3  4   medicham       mountain\n",
      "4  5     deoxys           rare\n",
      "5  6  metagross  rough-terrain\n",
      "6  7   gorebyss            sea\n",
      "7  8    banette          urban\n",
      "8  9    milotic    waters-edge\n"
     ]
    }
   ],
   "source": [
    "# Visualize o DataFrame\n",
    "print(df_habitats_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para criar a base de tipos de pokemon\n",
    "def create_types_base(df_types_url):\n",
    "    df_types_full = pd.DataFrame()\n",
    "\n",
    "    for url in df_types_url['url'].values:\n",
    "        try:\n",
    "            type_data = get_json_api(url)\n",
    "\n",
    "            if 'id' in type_data and 'name' in type_data:\n",
    "                id = type_data['id']\n",
    "                name = type_data['name']\n",
    "                damage_relations = type_data.get('damage_relations', {})\n",
    "                double_damage_from = damage_relations.get('double_damage_from', [])\n",
    "\n",
    "                # Extrair a lista de 'name' de 'double_damage_from'\n",
    "                names_list = [item.get('name', '') for item in double_damage_from]\n",
    "\n",
    "                sr_types = pd.Series({\n",
    "                    \"id\": id,\n",
    "                    \"name\": name,\n",
    "                    \"double_damage_from_names\": str(names_list),  # Nova coluna\n",
    "                })\n",
    "\n",
    "                df_types_full = pd.concat([df_types_full, sr_types.to_frame().T], ignore_index=True)\n",
    "            else:\n",
    "                print(f\"Resposta da API para URL {url} não possui as chaves 'id' e 'name'.\")\n",
    "        except Exception as e:\n",
    "            print(f\"Erro ao processar a URL {url}: {str(e)}\")\n",
    "\n",
    "    return df_types_full\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Criação da base de tipos\n",
    "df_types_url = load_bd(\"type_url\")\n",
    "df_types_full = create_types_base(df_types_url)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id      name                           double_damage_from_names\n",
      "0       1    normal                                       ['fighting']\n",
      "1       2  fighting                     ['flying', 'psychic', 'fairy']\n",
      "2       3    flying                        ['rock', 'electric', 'ice']\n",
      "3       4    poison                              ['ground', 'psychic']\n",
      "4       5    ground                          ['water', 'grass', 'ice']\n",
      "5       6      rock  ['fighting', 'ground', 'steel', 'water', 'grass']\n",
      "6       7       bug                         ['flying', 'rock', 'fire']\n",
      "7       8     ghost                                  ['ghost', 'dark']\n",
      "8       9     steel                     ['fighting', 'ground', 'fire']\n",
      "9      10      fire                        ['ground', 'rock', 'water']\n",
      "10     11     water                              ['grass', 'electric']\n",
      "11     12     grass         ['flying', 'poison', 'bug', 'fire', 'ice']\n",
      "12     13  electric                                         ['ground']\n",
      "13     14   psychic                           ['bug', 'ghost', 'dark']\n",
      "14     15       ice              ['fighting', 'rock', 'steel', 'fire']\n",
      "15     16    dragon                         ['ice', 'dragon', 'fairy']\n",
      "16     17      dark                       ['fighting', 'bug', 'fairy']\n",
      "17     18     fairy                                ['poison', 'steel']\n",
      "18  10001   unknown                                                 []\n",
      "19  10002    shadow                                                 []\n"
     ]
    }
   ],
   "source": [
    "# Visualize o DataFrame\n",
    "print(df_types_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Etapa de transformação\n",
    "\n",
    "# Função para transformar e salvar a base de pokemons\n",
    "def transform_and_save_pokemons(df_pokemons_full):\n",
    "    # Converter coluna 'abilities' de lista para string\n",
    "    df_pokemons_full['abilities'] = df_pokemons_full['abilities'].apply(lambda abilities: ', '.join(ast.literal_eval(abilities)))\n",
    "\n",
    "    # Calcular a média da altura e peso\n",
    "    df_pokemons_full['avg_height'] = (df_pokemons_full['height'] / 10).mean()  # Convertendo de decímetros para metros\n",
    "    df_pokemons_full['avg_weight'] = (df_pokemons_full['weight'] / 10).mean()  # Convertendo de hectogramas para quilogramas\n",
    "\n",
    "    # Criar coluna 'bmi' (Índice de Massa Corporal)\n",
    "    df_pokemons_full['bmi'] = df_pokemons_full['avg_weight'] / (df_pokemons_full['avg_height'] ** 2)\n",
    "\n",
    "    # Salvando o DataFrame transformado no banco de dados\n",
    "    save_bd(df_pokemons_full, \"pokemons_transformed\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Executar transformação da base de pokemons\n",
    "transform_and_save_pokemons(df_pokemons_full)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transform_and_save_habilidades(df_habilidades_full):\n",
    "    \n",
    "    # Exemplo de transformação: Filtrar habilidades apenas da geração principal\n",
    "    df_habilidades_full = df_habilidades_full[df_habilidades_full['is_main_series']]\n",
    "\n",
    "    # Exemplo de transformação: Converter a coluna 'effect' para minúsculas\n",
    "    df_habilidades_full['effect'] = df_habilidades_full['effect'].str.lower()\n",
    "\n",
    "    # Após as transformações, salve o DataFrame transformado no banco de dados\n",
    "    save_bd(df_habilidades_full, \"habilidades_transformed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vitor\\AppData\\Local\\Temp\\ipykernel_22716\\3891013587.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_habilidades_full['effect'] = df_habilidades_full['effect'].str.lower()\n"
     ]
    }
   ],
   "source": [
    "# Executar transformação da base de habilidades\n",
    "transform_and_save_habilidades(df_habilidades_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para transformar e salvar a base de habitats\n",
    "def transform_and_save_habitats(df_habitats_full):\n",
    "    # Exemplo de transformação: converter o nome do habitat para maiúsculas\n",
    "    df_habitats_full['habitat_name'] = df_habitats_full['habitat_name'].str.upper()\n",
    "\n",
    "    # Salvar o DataFrame transformado no banco de dados\n",
    "    save_bd(df_habitats_full, \"habitats_transformed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Executar transformação da base de habitats\n",
    "transform_and_save_habitats(df_habitats_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transform_and_save_type(df_types_full):\n",
    "    # Exemplo de transformação: converter o nome de quem dá dano duplo para maiúsculas\n",
    "    df_types_full['double_damage_from_names'] = df_types_full['double_damage_from_names'].str.upper()\n",
    "\n",
    "    # Salvar o DataFrame transformado no banco de dados\n",
    "    save_bd(df_types_full, \"type_transformed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Executar transformação da base de tipos\n",
    "transform_and_save_type(df_types_full)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Carregar os DataFrames transformados do banco de dados\n",
    "df_pokemons_transformed = load_bd(\"pokemons_transformed\")\n",
    "df_habitats_transformed = load_bd(\"habitats_transformed\")\n",
    "df_habilidades_transformed = load_bd(\"habilidades_transformed\")\n",
    "df_type_transformed = load_bd(\"type_transformed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merges em etapas para habitat, habilidades e pokemons\n",
    "df_merged = pd.merge(df_pokemons_transformed[['name', 'abilities', 'avg_height', 'avg_weight', 'bmi', 'base_experience']],\n",
    "                     df_habitats_transformed[['name', 'habitat_name']],\n",
    "                     on='name', how='left')\n",
    "\n",
    "df_merged = pd.merge(df_merged,\n",
    "                     df_habilidades_transformed[['name', 'generation', 'is_main_series', 'effect']],\n",
    "                     on='name', how='left')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          name              abilities  avg_height  avg_weight  \\\n",
      "0                    bulbasaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "1                      ivysaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "2                     venusaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "3                   charmander     blaze, solar-power    2.046774   98.086329   \n",
      "4                   charmeleon     blaze, solar-power    2.046774   98.086329   \n",
      "...                        ...                    ...         ...         ...   \n",
      "1297   ogerpon-wellspring-mask           water-absorb    2.046774   98.086329   \n",
      "1298  ogerpon-hearthflame-mask           mold-breaker    2.046774   98.086329   \n",
      "1299  ogerpon-cornerstone-mask                 sturdy    2.046774   98.086329   \n",
      "1300        terapagos-terastal             tera-shell    2.046774   98.086329   \n",
      "1301         terapagos-stellar          teraform-zero    2.046774   98.086329   \n",
      "\n",
      "            bmi  base_experience habitat_name generation  is_main_series  \\\n",
      "0     23.413623             64.0          NaN        NaN             NaN   \n",
      "1     23.413623            142.0          NaN        NaN             NaN   \n",
      "2     23.413623            263.0          NaN        NaN             NaN   \n",
      "3     23.413623             62.0          NaN        NaN             NaN   \n",
      "4     23.413623            142.0          NaN        NaN             NaN   \n",
      "...         ...              ...          ...        ...             ...   \n",
      "1297  23.413623              NaN          NaN        NaN             NaN   \n",
      "1298  23.413623              NaN          NaN        NaN             NaN   \n",
      "1299  23.413623              NaN          NaN        NaN             NaN   \n",
      "1300  23.413623              NaN          NaN        NaN             NaN   \n",
      "1301  23.413623              NaN          NaN        NaN             NaN   \n",
      "\n",
      "     effect  \n",
      "0       NaN  \n",
      "1       NaN  \n",
      "2       NaN  \n",
      "3       NaN  \n",
      "4       NaN  \n",
      "...     ...  \n",
      "1297    NaN  \n",
      "1298    NaN  \n",
      "1299    NaN  \n",
      "1300    NaN  \n",
      "1301    NaN  \n",
      "\n",
      "[1302 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# Visualizar o DataFrame resultante\n",
    "print(df_merged)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  pokemon_name              abilities  avg_height  avg_weight  \\\n",
      "0                    bulbasaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "1                      ivysaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "2                     venusaur  overgrow, chlorophyll    2.046774   98.086329   \n",
      "3                   charmander     blaze, solar-power    2.046774   98.086329   \n",
      "4                   charmeleon     blaze, solar-power    2.046774   98.086329   \n",
      "...                        ...                    ...         ...         ...   \n",
      "1297   ogerpon-wellspring-mask           water-absorb    2.046774   98.086329   \n",
      "1298  ogerpon-hearthflame-mask           mold-breaker    2.046774   98.086329   \n",
      "1299  ogerpon-cornerstone-mask                 sturdy    2.046774   98.086329   \n",
      "1300        terapagos-terastal             tera-shell    2.046774   98.086329   \n",
      "1301         terapagos-stellar          teraform-zero    2.046774   98.086329   \n",
      "\n",
      "            bmi  base_experience double_damage_from_names habitat_name  \\\n",
      "0     23.413623             64.0                      NaN          NaN   \n",
      "1     23.413623            142.0                      NaN          NaN   \n",
      "2     23.413623            263.0                      NaN          NaN   \n",
      "3     23.413623             62.0                      NaN          NaN   \n",
      "4     23.413623            142.0                      NaN          NaN   \n",
      "...         ...              ...                      ...          ...   \n",
      "1297  23.413623              NaN                      NaN          NaN   \n",
      "1298  23.413623              NaN                      NaN          NaN   \n",
      "1299  23.413623              NaN                      NaN          NaN   \n",
      "1300  23.413623              NaN                      NaN          NaN   \n",
      "1301  23.413623              NaN                      NaN          NaN   \n",
      "\n",
      "     generation  is_main_series effect  \n",
      "0           NaN             NaN    NaN  \n",
      "1           NaN             NaN    NaN  \n",
      "2           NaN             NaN    NaN  \n",
      "3           NaN             NaN    NaN  \n",
      "4           NaN             NaN    NaN  \n",
      "...         ...             ...    ...  \n",
      "1297        NaN             NaN    NaN  \n",
      "1298        NaN             NaN    NaN  \n",
      "1299        NaN             NaN    NaN  \n",
      "1300        NaN             NaN    NaN  \n",
      "1301        NaN             NaN    NaN  \n",
      "\n",
      "[1302 rows x 11 columns]\n"
     ]
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
